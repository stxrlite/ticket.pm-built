{"version":3,"file":"translation.js","sourceRoot":"/","sources":["utils/translation.ts"],"names":[],"mappings":";AAAA;;;;EAIE;;;;;;AAEF,0DAA6B;AAC7B,wDAA0B;AAE1B,MAAa,WAAW;IACf,WAAW,CAAoC;IAC/C,UAAU,CAAqC;IAEvD;;;;OAIM;IACN,YAAY,OAAe,EAAE,GAAY;QACxC,GAAG,GAAG,GAAG,IAAI,UAAU,CAAC;QACxB,MAAM,OAAO,GAAG,mBAAI,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,OAAO,OAAO,CAAC,CAAC;QAClD,IAAG,CAAC,kBAAE,CAAC,UAAU,CAAC,OAAO,CAAC;YACzB,MAAM,IAAI,gBAAgB,CAAC,uFAAuF,CAAC,CAAC;QAErH,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,kBAAE,CAAC,YAAY,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC,CAAC;QAChE,IAAG,OAAO,KAAK,MAAM;YACpB,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,KAAK,CAAC,kBAAE,CAAC,YAAY,CAAC,mBAAI,CAAC,IAAI,CAAC,GAAG,EAAE,WAAW,CAAC,EAAE,MAAM,CAAC,CAAC,CAAC;IACrF,CAAC;IAED;;;;OAIM;IACN,QAAQ,CAAC,GAAW;QACnB,qDAAqD;QACrD,MAAM,IAAI,GAAG,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;QACnC,IAAG,IAAI;YAAE,OAAO,IAAI,CAAC;QAErB,kDAAkD;QAClD,MAAM,MAAM,GAAG,IAAI,CAAC,UAAU,IAAI,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;QACvD,IAAG,CAAC,MAAM;YACT,MAAM,IAAI,gBAAgB,CAAC,qBAAqB,GAAG,0FAA0F,CAAC,CAAC;QAEhJ,gCAAgC;QAChC,OAAO,CAAC,IAAI,CAAC,qBAAqB,GAAG,+FAA+F,CAAC,CAAC;QACtI,OAAO,MAAM,CAAC;IACf,CAAC;IAWD,WAAW,CAAC,GAAG,IAAc;QAC5B,2BAA2B;QAC3B,IAAG,IAAI,CAAC,MAAM,KAAK,CAAC;YACnB,IAAI,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QAE3B,gCAAgC;QAChC,IAAI,IAAI,GAA2D,IAAI,CAAC,WAAW,CAAC;QACpF,IAAI,IAAI,GAA2D,IAAI,CAAC,UAAU,CAAC;QAEnF,KAAI,MAAM,GAAG,IAAI,IAAI,EAAE;YACtB,IAAG,OAAM,CAAC,IAAI,CAAC,KAAK,QAAQ;gBAC3B,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC;YAClB,IAAG,IAAI,CAAC,UAAU,IAAI,OAAM,CAAC,IAAI,CAAC,KAAK,QAAQ;gBAC9C,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC;SAClB;QAED,IAAG,OAAM,CAAC,IAAI,CAAC,KAAK,QAAQ,IAAI,OAAM,CAAC,IAAI,CAAC,KAAK,QAAQ;YAAE,OAAO,IAAI,CAAC;QACvE,IAAG,OAAM,CAAC,IAAI,CAAC,KAAK,QAAQ,IAAI,OAAM,CAAC,IAAI,CAAC,KAAK,QAAQ;YACxD,MAAM,IAAI,gBAAgB,CAAC,qBAAqB,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,0FAA0F,CAAC,CAAC;QAC3J,OAAO,CAAC,IAAI,CAAC,qBAAqB,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,+FAA+F,CAAC,CAAC;QACjJ,OAAO,IAAI,CAAC;IACb,CAAC;IAED;;;;OAIM;IACN,kBAAkB,CAAC,GAAG,IAAc;QACnC,IAAI;YACH,OAAO,IAAI,CAAC,WAAW,CAAC,GAAG,IAAI,CAAC,CAAC;SACjC;QAAC,OAAM,EAAE,EAAE;YACX,OAAO;SACP;IACF,CAAC;IAWD,cAAc,CAAC,GAAG,IAAc;QAC/B,2BAA2B;QAC3B,IAAG,IAAI,CAAC,MAAM,KAAK,CAAC;YACnB,IAAI,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QAE3B,gCAAgC;QAChC,IAAI,IAAI,GAA2D,IAAI,CAAC,WAAW,CAAC;QACpF,IAAI,IAAI,GAA2D,IAAI,CAAC,UAAU,CAAC;QAEnF,KAAI,MAAM,GAAG,IAAI,IAAI,EAAE;YACtB,IAAG,OAAM,CAAC,IAAI,CAAC,KAAK,QAAQ;gBAC3B,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC;YAClB,IAAG,IAAI,CAAC,UAAU,IAAI,OAAM,CAAC,IAAI,CAAC,KAAK,QAAQ;gBAC9C,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC;SAClB;QAED,IAAG,IAAI,KAAK,SAAS;YAAE,OAAO,IAAI,CAAC;QACnC,IAAG,IAAI,KAAK,SAAS;YACpB,MAAM,IAAI,gBAAgB,CAAC,qBAAqB,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,0FAA0F,CAAC,CAAC;QAC3J,OAAO,CAAC,IAAI,CAAC,qBAAqB,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,0GAA0G,CAAC,CAAC;QAC5J,OAAO,IAAI,CAAC;IACb,CAAC;CACD;AApHD,kCAoHC;AAED,MAAa,gBAAgB;IAC5B,IAAI,GAAG,kBAAkB,CAAC;IAC1B,OAAO,CAAS;IAChB,YAAY,GAAW;QACtB,IAAI,CAAC,OAAO,GAAG,GAAG,CAAC;IACpB,CAAC;CACD;AAND,4CAMC","sourcesContent":["/*\nCopyright © 2023 小兽兽/zhiyan114 (github.com/zhiyan114)\nFile is licensed respectively under the terms of the Apache License 2.0\nor whichever license the project is using at the time https://github.com/Sayrix/Ticket-Bot/blob/main/LICENSE\n*/\n\nimport path from \"node:path\";\nimport fs from \"fs-extra\";\n\nexport class Translation {\n\tprivate primaryData: {[k: string]: string | undefined};\n\tprivate backupData?: {[k: string]: string | undefined};\n\n\t/**\n     * locale handler module\n     * @param optName The locale file name (w/o extension)\n     * @param dir The directory of the locale files\n     */\n\tconstructor(optName: string, dir?: string) {\n\t\tdir = dir ?? \"./locale\";\n\t\tconst fullDir = path.join(dir, `${optName}.json`);\n\t\tif(!fs.existsSync(fullDir))\n\t\t\tthrow new TranslationError(\"Translation file not found, check your config to verify if the name is correct or not\");\n\n\t\tthis.primaryData = JSON.parse(fs.readFileSync(fullDir, \"utf8\"));\n\t\tif(optName !== \"main\")\n\t\t\tthis.backupData = JSON.parse(fs.readFileSync(path.join(dir, \"main.json\"), \"utf8\"));\n\t}\n\n\t/**\n     * Get the translation value or backup value if it doesn't exist\n     * @param key The object key the translation should pull\n     * @returns the translation data or throw error if the translation data cannot be found at all\n     */\n\tgetValue(key: string): string {\n\t\t// Try return the data from the main translation file\n\t\tconst main = this.primaryData[key];\n\t\tif(main) return main;\n\n\t\t// Pull backup and throw error if it doesn't exist\n\t\tconst backup = this.backupData && this.backupData[key];\n\t\tif(!backup)\n\t\t\tthrow new TranslationError(`TRANSLATION: Key '${key}' failed to pull backup translation. This indicates this key data does not exist at all.`);\n        \n\t\t// Return the backup translation\n\t\tconsole.warn(`TRANSLATION: Key '${key}' is missing translation. If you can, please help fill in the translation and make PR for it.`);\n\t\treturn backup;\n\t}\n\n\t/**\n     * Get the translation value that isn't on the top of the JSON object\n     * @param key All the keys leading to the value (or the classic dot access `\"first.second\"`)\n     * @returns the translation data or throw error if the translation data cannot be found at all\n     */\n\t// eslint-disable-next-line no-unused-vars\n\tgetSubValue(keys: string): string;\n\t// eslint-disable-next-line no-unused-vars\n\tgetSubValue(...keys: string[]): string;\n\tgetSubValue(...keys: string[]): string {\n\t\t// Convert the dot to array\n\t\tif(keys.length === 1)\n\t\t\tkeys = keys[0].split(\".\");\n\n\t\t// Check the primary value first\n\t\tlet main: {[k: string]: string | undefined} | string | undefined = this.primaryData;\n\t\tlet bkup: {[k: string]: string | undefined} | string | undefined = this.backupData;\n\t\t\n\t\tfor(const key of keys) {\n\t\t\tif(typeof(main) === \"object\")\n\t\t\t\tmain = main[key];\n\t\t\tif(this.backupData && typeof(bkup) === \"object\")\n\t\t\t\tbkup = bkup[key];\n\t\t}\n\n\t\tif(typeof(main) === \"string\" || typeof(main) === \"number\") return main;\n\t\tif(typeof(bkup) !== \"string\" && typeof(bkup) !== \"number\")\n\t\t\tthrow new TranslationError(`TRANSLATION: Key '${keys.join(\".\")}' failed to pull backup translation. This indicates this key data does not exist at all.`);\n\t\tconsole.warn(`TRANSLATION: Key '${keys.join(\".\")}' is missing translation. If you can, please help fill in the translation and make PR for it.`);\n\t\treturn bkup;\n\t}\n\n\t/**\n     * Used for translation keys that can be empty\n     * @param keys All the keys leading to the value\n     * @returns the translation data or undefined if the translation data cannot be found\n     */\n\tgetNoErrorSubValue(...keys: string[]): string | undefined {\n\t\ttry {\n\t\t\treturn this.getSubValue(...keys);\n\t\t} catch(ex) {\n\t\t\treturn;\n\t\t}\n\t}\n\n\t/**\n     * Get the raw translation value (getSubValue but without string/number checks)\n     * @param key All the keys leading to the value (or the classic dot access `\"first.second\"`)\n     * @returns the translation data or throw error if the translation data cannot be found at all\n     */\n\t// eslint-disable-next-line no-unused-vars\n\tgetSubRawValue(keys: string): string | number | null | object;\n\t// eslint-disable-next-line no-unused-vars\n\tgetSubRawValue(...keys: string[]): string | number | null | object;\n\tgetSubRawValue(...keys: string[]): string | number | null | object {\n\t\t// Convert the dot to array\n\t\tif(keys.length === 1)\n\t\t\tkeys = keys[0].split(\".\");\n\n\t\t// Check the primary value first\n\t\tlet main: {[k: string]: string | undefined} | string | undefined = this.primaryData;\n\t\tlet bkup: {[k: string]: string | undefined} | string | undefined = this.backupData;\n\t\t\n\t\tfor(const key of keys) {\n\t\t\tif(typeof(main) === \"object\")\n\t\t\t\tmain = main[key];\n\t\t\tif(this.backupData && typeof(bkup) === \"object\")\n\t\t\t\tbkup = bkup[key];\n\t\t}\n\n\t\tif(main !== undefined) return main;\n\t\tif(bkup === undefined)\n\t\t\tthrow new TranslationError(`TRANSLATION: Key '${keys.join(\".\")}' failed to pull backup translation. This indicates this key data does not exist at all.`);\n\t\tconsole.warn(`TRANSLATION: Key '${keys.join(\".\")}' is missing translation. This is a raw value operation so please contact the dev before translating it.`);\n\t\treturn bkup;\n\t}\n}\n\nexport class TranslationError {\n\tname = \"TranslationError\";\n\tmessage: string;\n\tconstructor(msg: string) {\n\t\tthis.message = msg;\n\t}\n}"]}